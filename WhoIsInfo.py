from tkinter import *
from tkinter import ttk
import requests
import json
import whois
from fpdf import FPDF 
import datetime;

rootentry = Tk()
rootentry.title('Domain Intel')
rootentry.geometry("350x200+670+300")
bg= PhotoImage(file="matrixbg.png")
my_canvas = Canvas(rootentry, width=200, height=100, bd=0, highlightthickness=0, bg="green")
my_canvas.pack(fill="both", expand=True)

my_canvas.create_image(0,0, image=bg, anchor="nw")
my_canvas.create_text(180,45, text="Enter Domain name:", font=("Helvetica", 18,'bold'), fill="white")
entry = Entry(rootentry, font=("Helvitica",12),width=13, fg="black", bd=0)
entry_window = my_canvas.create_window(115,80,anchor='nw', window=entry)
typeid='domain'
def store():
    global inp
    inp=entry.get()
    print(typeid+":"+inp)
    rootentry.destroy()

buttonentry=Button(rootentry, text="Done",font=("times",12),width=5,padx=15, pady=7, fg='white', bg='black', bd=0, command=store)
buttonentry_window = my_canvas.create_window(145,130, anchor='nw', window=buttonentry)

rootentry.mainloop()

w = whois.whois(inp)

with open("usernamelocation.txt","r") as n:
    m=n.readlines()
username=m[0].strip()
location=m[1]

def makepdf(x,y,resultfromtxt):
    class PDF(FPDF):
        def header(self):
            self.image('pdfbgi.png', 0, 0, 210)
            self.set_font('Arial', 'B', 30)
            self.cell(80)
            self.cell(30, 30, 'Mal-Or-Not', 0, 1, 'C')
            self.set_font('Arial', 'U', 25)
            if(y=='ip' or y=='url'):
                self.cell(190, 10, y.upper()+' Report', 0, 1, 'C')
            else:
                self.cell(190, 10, y.capitalize()+' Report', 0, 1, 'C')
            self.ln(20)

        def footer(self):
            self.set_y(-20)
            self.set_font('Arial', 'I', 8)
            self.cell(0, 5, "Report generated at: "+txs, 0, 1, 'L')
            self.cell(0, 5, "Report generated by: "+username, 0, 1, 'L')
            self.cell(0, 5, "Location: "+location, 0, 0, 'L')
            self.cell(0, 5, 'Page ' + str(self.page_no()) + '/{nb}', 0, 1, 'R')
            self.set_text_color(127, 127, 127)
            self.cell(0, 5, "Â© 2022 Mal-Or-Not, All rights reserved.", 0, 0, 'C')

    pdf = PDF()
    pdf.alias_nb_pages()
    name="reports/domain/"+inp+".pdf"

    ct=datetime.datetime.now().isoformat(' ', 'seconds')
    txs=str(ct)

    pdf.add_page()
    pdf.set_font("Arial", 'B', size = 15) 
    file = open("output/"+y+"/"+x+"."+y+".report", "r") 
    for g in file:
            pdf.multi_cell(0, 10, txt = g, border=1, align = 'L') 

    pdf.output(name)

rootentry = Tk()
rootentry.title('Domain info')
rootentry.geometry("410x600+670+300")

main_frame=Frame(rootentry)
main_frame.pack(fill=BOTH, expand=1)

my_canvas=Canvas(main_frame, bg='black', bd=0, highlightthickness=0, relief='ridge')
my_canvas.pack(side=LEFT, fill=BOTH, expand=1)

my_scrollbar=ttk.Scrollbar(main_frame, orient=VERTICAL, command=my_canvas.yview)
my_scrollbar.pack(side=RIGHT, fill=Y)

my_canvas.configure(yscrollcommand=my_scrollbar.set)
my_canvas.bind('<Configure>', lambda e:my_canvas.configure(scrollregion=my_canvas.bbox("all")))

second_frame=Frame(my_canvas, bg='black')

my_canvas.create_window((0,0), window=second_frame, anchor='nw')

row=0
col=0
for i in w.keys():
    if i != 'status':
        col=0
        text_key= Label(second_frame, text=i.capitalize().replace("_", " ")+":", font='"Helvetica" 12', anchor="w", justify=LEFT, bg='black', fg='white').grid(row=row, column=col)
        col+=1
        if (w[i]!=None):
            if (type(w[i]) is list):
                dlen=len(w[i])
                for j in range(0,dlen):
                    text_value= Label(second_frame, text=w[i][j], font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
                    row+=1

            else:
                text_value= Label(second_frame, text=w[i], font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
                row+=1
        else:
            text_value= Label(second_frame, text='Not listed', font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
            row+=1


response = requests.get("https://ipqualityscore.com/api/json/url/ZZZZ/"+inp)
domainscorecheck=json.loads(response.text)

for p in domainscorecheck.keys():
    if p != 'domain_age':
        col=0
        text_key= Label(second_frame, text=p.capitalize().replace("_", " ")+":", anchor="w", justify=LEFT, font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
        col+=1
        if (domainscorecheck[p]!=None):
                if (type(domainscorecheck[p]) is list):
                    checklen=len(domainscorecheck[p])
                    for q in range(0,checklen):
                        text_value= Label(second_frame, text=domainscorecheck[p][q], font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
                        row+=1
                else:
                    text_value= Label(second_frame, text=domainscorecheck[p], font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
                    row+=1
        else:
            text_value= Label(second_frame, text='Not listed', font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
            row+=1
    else:
        col=0
        text_key= Label(second_frame, text=p.capitalize().replace("_", " ")+":", font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
        row+=1
        for r in domainscorecheck[p].keys():
           col=0
           text_key= Label(second_frame, text="-"+r.capitalize().replace("_", " ")+":", font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
           col+=1
           text_value= Label(second_frame, text=domainscorecheck[p][r], font='"Helvetica" 12', bg='black', fg='white').grid(row=row, column=col)
           row+=1


rootentry.mainloop()

with open("output/domain/"+inp+".domain.report", 'w') as f: 
    for key, value in w.items():
        if key != 'status':
            f.write('%s:%s\n' % (key, value))
    for key, value in domainscorecheck.items():
        f.write('%s:%s\n' % (key, value))
    f.write('\n')

currentdomain=open("output/domain/"+inp+".domain.report", 'r')
readcurrent=currentdomain.read()
makepdf(inp,typeid,readcurrent)
currentdomain.close()

maindomainfile=open("output/domain/"+"domain.master.report","a")
maindomainfile.write(readcurrent)
maindomainfile.close()
